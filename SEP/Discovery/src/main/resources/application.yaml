#spring.application.name=eureka
#server.port=8761
## da ne registruje sam sebe, jer treba da se ponasa kao server
#eureka.client.register-with-eureka=false
#eureka.client.fetch-registry=false
eureka:
  client:
    serviceUrl:
      defaultZone: http://eureka-peer1/eureka/,http://eureka-peer2/eureka/
logging:
  file: Discovery/logs/application.log

tpd:
  peer1Port: 8761
  peer2Port: 8760
---

spring:
  application:
    name: eureka
  profiles: peer1

eureka:
  instance:
    hostname: eureka-peer1
    appname: eureka-cluster
  client:
    register-with-eureka: true
    fetch-registry: false
    service-url:
      #defaultZone: http://eureka-peer2:${tpd.peer2Port}/eureka
      defaultZone: http://localhost:${tpd.peer2Port}/eureka
#  server:
#    enable-self-preservation: false

server:
  port: ${tpd.peer1Port}

---

spring:
  application:
    name: eureka
  profiles: peer2

server:
  port: ${tpd.peer2Port}
eureka:
  instance:
    hostname: eureka-peer2
    appname: eureka-cluster
  client:
    register-with-eureka: true
    fetch-registry: false
    service-url:
      #defaultZone: http://eureka-peer1:${tpd.peer1Port}/eureka
      defaultZone: http://localhost:${tpd.peer1Port}/eureka
#  server:
#    enable-self-preservation: false
